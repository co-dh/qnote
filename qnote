#!/usr/bin/expect -f

# Handling multiple line function in expect over complicated qnote,
# and also the fact that embaedding markdown in q code, embedding q code in markdown code blcok
# complicate things unnecessarily. So I decide that we can just put
# Markdown at the end of q code by \
# q code blocks inside Markdown will be executed.
# q code inside ~~~ will be executed, and put INSIDE markdown code block with output,
# while q coed inside ``` will be executed, and put OUTSIDE of markdown code block with output.

spawn q 
expect "q)"
set fname [lindex $argv 0]
send -- "\\l $fname\r"
expect "\nq)"

set fp   [open $fname r]
# initial state
set state init

puts "~~~q"
foreach line [split [read $fp] "\n"] {
    switch $state {
        {init} {
            puts $line
            switch -regexp $line {
                {^/[ ]*$}    { set state comment }
                {^\\[ ]*$}   { puts "~~~"; set state markdown }
            }
        }
        {comment} {
            puts $line
            switch -regexp $line {
                {^\[ ]*$}    { set state init}
            }
        }
        {markdown} {
            switch -regexp $line {
                {^~~~q[ ]*$}    { puts $line; set state markdownCode; continue }
                {^```q[ ]*$}    {            set state markdownCode2; continue }
            }
        puts $line;
        }

        {markdownCode} {
            switch -regexp $line {
                {^~~~[ ]*$}    { puts $line; set state markdown; continue }
            }
            send -- "[string trim $line]\r"
            expect "\nq)"
        }

        {markdownCode2} {
            switch -regexp $line {
                {^```[ ]*$}    {  set state markdown; continue }
            }
            send -- "[string trim $line]\r"
            expect "\nq)"
        }
    }
}

close $fp
exit
